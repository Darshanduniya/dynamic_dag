from airflow import DAG
from airflow.operators.dummy_operator import DummyOperator
from datetime import datetime, timedelta

def create_dag(spark_size):
    # Define the DAG name based on the spark_size
    dag_name = f"data_load_{spark_size}"
    
    # Default arguments for the DAG
    default_args = {
        'owner': 'airflow',
        'depends_on_past': False,
        'start_date': datetime(2023, 8, 1),
        'email_on_failure': False,
        'email_on_retry': False,
        'retries': 1,
        'retry_delay': timedelta(minutes=5),
    }
    
    # Instantiate the DAG
    dag = DAG(
        dag_name,
        default_args=default_args,
        description=f"A data load DAG for spark size {spark_size}",
        schedule_interval=timedelta(days=1),
        catchup=False,
    )
    
    # Define tasks (dummy tasks for this example)
    start = DummyOperator(task_id='start', dag=dag)
    end = DummyOperator(task_id='end', dag=dag)
    
    # Define task dependencies
    start >> end
    
    return dag

# Call the function to create the DAG for 'small', 'medium', and 'large'
small_dag = create_dag('small')
medium_dag = create_dag('medium')
large_dag = create_dag('large')

# Register the DAGs in the global namespace
globals()['data_load_small'] = small_dag
globals()['data_load_medium'] = medium_dag
globals()['data_load_large'] = large_dag
